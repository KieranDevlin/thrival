module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateEvent {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregateSpeaker {
  count: Int!
}

type AggregateTheme {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Event {
  id: ID!
  title: String!
  description: String!
  date: Int!
  time: String
  thumbnail_url: String!
  location_name: String!
  location_address: String!
  price: Float
  maxTickets: Int!
  soldTickets: Int
  speakers(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Speaker!]
  theme: Theme
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  description: String!
  date: Int!
  time: String
  thumbnail_url: String!
  location_name: String!
  location_address: String!
  price: Float
  maxTickets: Int!
  soldTickets: Int
  speakers: SpeakerCreateManyInput
  theme: ThemeCreateOneInput
}

input EventCreateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  date_ASC
  date_DESC
  time_ASC
  time_DESC
  thumbnail_url_ASC
  thumbnail_url_DESC
  location_name_ASC
  location_name_DESC
  location_address_ASC
  location_address_DESC
  price_ASC
  price_DESC
  maxTickets_ASC
  maxTickets_DESC
  soldTickets_ASC
  soldTickets_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String!
  date: Int!
  time: String
  thumbnail_url: String!
  location_name: String!
  location_address: String!
  price: Float
  maxTickets: Int!
  soldTickets: Int
}

input EventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  date: Int
  date_not: Int
  date_in: [Int!]
  date_not_in: [Int!]
  date_lt: Int
  date_lte: Int
  date_gt: Int
  date_gte: Int
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  thumbnail_url: String
  thumbnail_url_not: String
  thumbnail_url_in: [String!]
  thumbnail_url_not_in: [String!]
  thumbnail_url_lt: String
  thumbnail_url_lte: String
  thumbnail_url_gt: String
  thumbnail_url_gte: String
  thumbnail_url_contains: String
  thumbnail_url_not_contains: String
  thumbnail_url_starts_with: String
  thumbnail_url_not_starts_with: String
  thumbnail_url_ends_with: String
  thumbnail_url_not_ends_with: String
  location_name: String
  location_name_not: String
  location_name_in: [String!]
  location_name_not_in: [String!]
  location_name_lt: String
  location_name_lte: String
  location_name_gt: String
  location_name_gte: String
  location_name_contains: String
  location_name_not_contains: String
  location_name_starts_with: String
  location_name_not_starts_with: String
  location_name_ends_with: String
  location_name_not_ends_with: String
  location_address: String
  location_address_not: String
  location_address_in: [String!]
  location_address_not_in: [String!]
  location_address_lt: String
  location_address_lte: String
  location_address_gt: String
  location_address_gte: String
  location_address_contains: String
  location_address_not_contains: String
  location_address_starts_with: String
  location_address_not_starts_with: String
  location_address_ends_with: String
  location_address_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  maxTickets: Int
  maxTickets_not: Int
  maxTickets_in: [Int!]
  maxTickets_not_in: [Int!]
  maxTickets_lt: Int
  maxTickets_lte: Int
  maxTickets_gt: Int
  maxTickets_gte: Int
  soldTickets: Int
  soldTickets_not: Int
  soldTickets_in: [Int!]
  soldTickets_not_in: [Int!]
  soldTickets_lt: Int
  soldTickets_lte: Int
  soldTickets_gt: Int
  soldTickets_gte: Int
  AND: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateDataInput {
  title: String
  description: String
  date: Int
  time: String
  thumbnail_url: String
  location_name: String
  location_address: String
  price: Float
  maxTickets: Int
  soldTickets: Int
  speakers: SpeakerUpdateManyInput
  theme: ThemeUpdateOneInput
}

input EventUpdateInput {
  title: String
  description: String
  date: Int
  time: String
  thumbnail_url: String
  location_name: String
  location_address: String
  price: Float
  maxTickets: Int
  soldTickets: Int
  speakers: SpeakerUpdateManyInput
  theme: ThemeUpdateOneInput
}

input EventUpdateManyDataInput {
  title: String
  description: String
  date: Int
  time: String
  thumbnail_url: String
  location_name: String
  location_address: String
  price: Float
  maxTickets: Int
  soldTickets: Int
}

input EventUpdateManyInput {
  create: [EventCreateInput!]
  update: [EventUpdateWithWhereUniqueNestedInput!]
  upsert: [EventUpsertWithWhereUniqueNestedInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyMutationInput {
  title: String
  description: String
  date: Int
  time: String
  thumbnail_url: String
  location_name: String
  location_address: String
  price: Float
  maxTickets: Int
  soldTickets: Int
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput!
  data: EventUpdateDataInput!
}

input EventUpsertWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput!
  update: EventUpdateDataInput!
  create: EventCreateInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  date: Int
  date_not: Int
  date_in: [Int!]
  date_not_in: [Int!]
  date_lt: Int
  date_lte: Int
  date_gt: Int
  date_gte: Int
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  thumbnail_url: String
  thumbnail_url_not: String
  thumbnail_url_in: [String!]
  thumbnail_url_not_in: [String!]
  thumbnail_url_lt: String
  thumbnail_url_lte: String
  thumbnail_url_gt: String
  thumbnail_url_gte: String
  thumbnail_url_contains: String
  thumbnail_url_not_contains: String
  thumbnail_url_starts_with: String
  thumbnail_url_not_starts_with: String
  thumbnail_url_ends_with: String
  thumbnail_url_not_ends_with: String
  location_name: String
  location_name_not: String
  location_name_in: [String!]
  location_name_not_in: [String!]
  location_name_lt: String
  location_name_lte: String
  location_name_gt: String
  location_name_gte: String
  location_name_contains: String
  location_name_not_contains: String
  location_name_starts_with: String
  location_name_not_starts_with: String
  location_name_ends_with: String
  location_name_not_ends_with: String
  location_address: String
  location_address_not: String
  location_address_in: [String!]
  location_address_not_in: [String!]
  location_address_lt: String
  location_address_lte: String
  location_address_gt: String
  location_address_gte: String
  location_address_contains: String
  location_address_not_contains: String
  location_address_starts_with: String
  location_address_not_starts_with: String
  location_address_ends_with: String
  location_address_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  maxTickets: Int
  maxTickets_not: Int
  maxTickets_in: [Int!]
  maxTickets_not_in: [Int!]
  maxTickets_lt: Int
  maxTickets_lte: Int
  maxTickets_gt: Int
  maxTickets_gte: Int
  soldTickets: Int
  soldTickets_not: Int
  soldTickets_in: [Int!]
  soldTickets_not_in: [Int!]
  soldTickets_lt: Int
  soldTickets_lte: Int
  soldTickets_gt: Int
  soldTickets_gte: Int
  speakers_every: SpeakerWhereInput
  speakers_some: SpeakerWhereInput
  speakers_none: SpeakerWhereInput
  theme: ThemeWhereInput
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createSpeaker(data: SpeakerCreateInput!): Speaker!
  updateSpeaker(data: SpeakerUpdateInput!, where: SpeakerWhereUniqueInput!): Speaker
  updateManySpeakers(data: SpeakerUpdateManyMutationInput!, where: SpeakerWhereInput): BatchPayload!
  upsertSpeaker(where: SpeakerWhereUniqueInput!, create: SpeakerCreateInput!, update: SpeakerUpdateInput!): Speaker!
  deleteSpeaker(where: SpeakerWhereUniqueInput!): Speaker
  deleteManySpeakers(where: SpeakerWhereInput): BatchPayload!
  createTheme(data: ThemeCreateInput!): Theme!
  updateTheme(data: ThemeUpdateInput!, where: ThemeWhereUniqueInput!): Theme
  updateManyThemes(data: ThemeUpdateManyMutationInput!, where: ThemeWhereInput): BatchPayload!
  upsertTheme(where: ThemeWhereUniqueInput!, create: ThemeCreateInput!, update: ThemeUpdateInput!): Theme!
  deleteTheme(where: ThemeWhereUniqueInput!): Theme
  deleteManyThemes(where: ThemeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  timestamp: DateTime
  announcement: String
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  announcement: String
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  timestamp_ASC
  timestamp_DESC
  announcement_ASC
  announcement_DESC
}

type NotificationPreviousValues {
  id: ID!
  timestamp: DateTime
  announcement: String
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateInput {
  announcement: String
}

input NotificationUpdateManyMutationInput {
  announcement: String
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  announcement: String
  announcement_not: String
  announcement_in: [String!]
  announcement_not_in: [String!]
  announcement_lt: String
  announcement_lte: String
  announcement_gt: String
  announcement_gte: String
  announcement_contains: String
  announcement_not_contains: String
  announcement_starts_with: String
  announcement_not_starts_with: String
  announcement_ends_with: String
  announcement_not_ends_with: String
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  speaker(where: SpeakerWhereUniqueInput!): Speaker
  speakers(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Speaker]!
  speakersConnection(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeakerConnection!
  theme(where: ThemeWhereUniqueInput!): Theme
  themes(where: ThemeWhereInput, orderBy: ThemeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Theme]!
  themesConnection(where: ThemeWhereInput, orderBy: ThemeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThemeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Speaker {
  id: ID!
  owner: User
  profile_picture: String!
  title: String!
  linkedin: String
  facebook: String
  description: String!
}

type SpeakerConnection {
  pageInfo: PageInfo!
  edges: [SpeakerEdge]!
  aggregate: AggregateSpeaker!
}

input SpeakerCreateInput {
  id: ID
  owner: UserCreateOneWithoutIsSpeakerInput
  profile_picture: String!
  title: String!
  linkedin: String
  facebook: String
  description: String!
}

input SpeakerCreateManyInput {
  create: [SpeakerCreateInput!]
  connect: [SpeakerWhereUniqueInput!]
}

input SpeakerCreateOneWithoutOwnerInput {
  create: SpeakerCreateWithoutOwnerInput
  connect: SpeakerWhereUniqueInput
}

input SpeakerCreateWithoutOwnerInput {
  id: ID
  profile_picture: String!
  title: String!
  linkedin: String
  facebook: String
  description: String!
}

type SpeakerEdge {
  node: Speaker!
  cursor: String!
}

enum SpeakerOrderByInput {
  id_ASC
  id_DESC
  profile_picture_ASC
  profile_picture_DESC
  title_ASC
  title_DESC
  linkedin_ASC
  linkedin_DESC
  facebook_ASC
  facebook_DESC
  description_ASC
  description_DESC
}

type SpeakerPreviousValues {
  id: ID!
  profile_picture: String!
  title: String!
  linkedin: String
  facebook: String
  description: String!
}

input SpeakerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  profile_picture: String
  profile_picture_not: String
  profile_picture_in: [String!]
  profile_picture_not_in: [String!]
  profile_picture_lt: String
  profile_picture_lte: String
  profile_picture_gt: String
  profile_picture_gte: String
  profile_picture_contains: String
  profile_picture_not_contains: String
  profile_picture_starts_with: String
  profile_picture_not_starts_with: String
  profile_picture_ends_with: String
  profile_picture_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  linkedin: String
  linkedin_not: String
  linkedin_in: [String!]
  linkedin_not_in: [String!]
  linkedin_lt: String
  linkedin_lte: String
  linkedin_gt: String
  linkedin_gte: String
  linkedin_contains: String
  linkedin_not_contains: String
  linkedin_starts_with: String
  linkedin_not_starts_with: String
  linkedin_ends_with: String
  linkedin_not_ends_with: String
  facebook: String
  facebook_not: String
  facebook_in: [String!]
  facebook_not_in: [String!]
  facebook_lt: String
  facebook_lte: String
  facebook_gt: String
  facebook_gte: String
  facebook_contains: String
  facebook_not_contains: String
  facebook_starts_with: String
  facebook_not_starts_with: String
  facebook_ends_with: String
  facebook_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SpeakerScalarWhereInput!]
  OR: [SpeakerScalarWhereInput!]
  NOT: [SpeakerScalarWhereInput!]
}

type SpeakerSubscriptionPayload {
  mutation: MutationType!
  node: Speaker
  updatedFields: [String!]
  previousValues: SpeakerPreviousValues
}

input SpeakerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SpeakerWhereInput
  AND: [SpeakerSubscriptionWhereInput!]
  OR: [SpeakerSubscriptionWhereInput!]
  NOT: [SpeakerSubscriptionWhereInput!]
}

input SpeakerUpdateDataInput {
  owner: UserUpdateOneWithoutIsSpeakerInput
  profile_picture: String
  title: String
  linkedin: String
  facebook: String
  description: String
}

input SpeakerUpdateInput {
  owner: UserUpdateOneWithoutIsSpeakerInput
  profile_picture: String
  title: String
  linkedin: String
  facebook: String
  description: String
}

input SpeakerUpdateManyDataInput {
  profile_picture: String
  title: String
  linkedin: String
  facebook: String
  description: String
}

input SpeakerUpdateManyInput {
  create: [SpeakerCreateInput!]
  update: [SpeakerUpdateWithWhereUniqueNestedInput!]
  upsert: [SpeakerUpsertWithWhereUniqueNestedInput!]
  delete: [SpeakerWhereUniqueInput!]
  connect: [SpeakerWhereUniqueInput!]
  set: [SpeakerWhereUniqueInput!]
  disconnect: [SpeakerWhereUniqueInput!]
  deleteMany: [SpeakerScalarWhereInput!]
  updateMany: [SpeakerUpdateManyWithWhereNestedInput!]
}

input SpeakerUpdateManyMutationInput {
  profile_picture: String
  title: String
  linkedin: String
  facebook: String
  description: String
}

input SpeakerUpdateManyWithWhereNestedInput {
  where: SpeakerScalarWhereInput!
  data: SpeakerUpdateManyDataInput!
}

input SpeakerUpdateOneWithoutOwnerInput {
  create: SpeakerCreateWithoutOwnerInput
  update: SpeakerUpdateWithoutOwnerDataInput
  upsert: SpeakerUpsertWithoutOwnerInput
  delete: Boolean
  disconnect: Boolean
  connect: SpeakerWhereUniqueInput
}

input SpeakerUpdateWithoutOwnerDataInput {
  profile_picture: String
  title: String
  linkedin: String
  facebook: String
  description: String
}

input SpeakerUpdateWithWhereUniqueNestedInput {
  where: SpeakerWhereUniqueInput!
  data: SpeakerUpdateDataInput!
}

input SpeakerUpsertWithoutOwnerInput {
  update: SpeakerUpdateWithoutOwnerDataInput!
  create: SpeakerCreateWithoutOwnerInput!
}

input SpeakerUpsertWithWhereUniqueNestedInput {
  where: SpeakerWhereUniqueInput!
  update: SpeakerUpdateDataInput!
  create: SpeakerCreateInput!
}

input SpeakerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  profile_picture: String
  profile_picture_not: String
  profile_picture_in: [String!]
  profile_picture_not_in: [String!]
  profile_picture_lt: String
  profile_picture_lte: String
  profile_picture_gt: String
  profile_picture_gte: String
  profile_picture_contains: String
  profile_picture_not_contains: String
  profile_picture_starts_with: String
  profile_picture_not_starts_with: String
  profile_picture_ends_with: String
  profile_picture_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  linkedin: String
  linkedin_not: String
  linkedin_in: [String!]
  linkedin_not_in: [String!]
  linkedin_lt: String
  linkedin_lte: String
  linkedin_gt: String
  linkedin_gte: String
  linkedin_contains: String
  linkedin_not_contains: String
  linkedin_starts_with: String
  linkedin_not_starts_with: String
  linkedin_ends_with: String
  linkedin_not_ends_with: String
  facebook: String
  facebook_not: String
  facebook_in: [String!]
  facebook_not_in: [String!]
  facebook_lt: String
  facebook_lte: String
  facebook_gt: String
  facebook_gte: String
  facebook_contains: String
  facebook_not_contains: String
  facebook_starts_with: String
  facebook_not_starts_with: String
  facebook_ends_with: String
  facebook_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SpeakerWhereInput!]
  OR: [SpeakerWhereInput!]
  NOT: [SpeakerWhereInput!]
}

input SpeakerWhereUniqueInput {
  id: ID
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  speaker(where: SpeakerSubscriptionWhereInput): SpeakerSubscriptionPayload
  theme(where: ThemeSubscriptionWhereInput): ThemeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Theme {
  id: ID!
  name: String!
  hexcode: String!
}

type ThemeConnection {
  pageInfo: PageInfo!
  edges: [ThemeEdge]!
  aggregate: AggregateTheme!
}

input ThemeCreateInput {
  id: ID
  name: String!
  hexcode: String
}

input ThemeCreateOneInput {
  create: ThemeCreateInput
  connect: ThemeWhereUniqueInput
}

type ThemeEdge {
  node: Theme!
  cursor: String!
}

enum ThemeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  hexcode_ASC
  hexcode_DESC
}

type ThemePreviousValues {
  id: ID!
  name: String!
  hexcode: String!
}

type ThemeSubscriptionPayload {
  mutation: MutationType!
  node: Theme
  updatedFields: [String!]
  previousValues: ThemePreviousValues
}

input ThemeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThemeWhereInput
  AND: [ThemeSubscriptionWhereInput!]
  OR: [ThemeSubscriptionWhereInput!]
  NOT: [ThemeSubscriptionWhereInput!]
}

input ThemeUpdateDataInput {
  name: String
  hexcode: String
}

input ThemeUpdateInput {
  name: String
  hexcode: String
}

input ThemeUpdateManyMutationInput {
  name: String
  hexcode: String
}

input ThemeUpdateOneInput {
  create: ThemeCreateInput
  update: ThemeUpdateDataInput
  upsert: ThemeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ThemeWhereUniqueInput
}

input ThemeUpsertNestedInput {
  update: ThemeUpdateDataInput!
  create: ThemeCreateInput!
}

input ThemeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hexcode: String
  hexcode_not: String
  hexcode_in: [String!]
  hexcode_not_in: [String!]
  hexcode_lt: String
  hexcode_lte: String
  hexcode_gt: String
  hexcode_gte: String
  hexcode_contains: String
  hexcode_not_contains: String
  hexcode_starts_with: String
  hexcode_not_starts_with: String
  hexcode_ends_with: String
  hexcode_not_ends_with: String
  AND: [ThemeWhereInput!]
  OR: [ThemeWhereInput!]
  NOT: [ThemeWhereInput!]
}

input ThemeWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String
  password: String!
  name: String!
  isSpeaker: Speaker
  ownedTickets(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  password: String!
  name: String!
  isSpeaker: SpeakerCreateOneWithoutOwnerInput
  ownedTickets: EventCreateManyInput
}

input UserCreateOneWithoutIsSpeakerInput {
  create: UserCreateWithoutIsSpeakerInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutIsSpeakerInput {
  id: ID
  email: String
  password: String!
  name: String!
  ownedTickets: EventCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  isSpeaker: SpeakerUpdateOneWithoutOwnerInput
  ownedTickets: EventUpdateManyInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
}

input UserUpdateOneWithoutIsSpeakerInput {
  create: UserCreateWithoutIsSpeakerInput
  update: UserUpdateWithoutIsSpeakerDataInput
  upsert: UserUpsertWithoutIsSpeakerInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutIsSpeakerDataInput {
  email: String
  password: String
  name: String
  ownedTickets: EventUpdateManyInput
}

input UserUpsertWithoutIsSpeakerInput {
  update: UserUpdateWithoutIsSpeakerDataInput!
  create: UserCreateWithoutIsSpeakerInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isSpeaker: SpeakerWhereInput
  ownedTickets_every: EventWhereInput
  ownedTickets_some: EventWhereInput
  ownedTickets_none: EventWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    